{"version":3,"sources":["components/auth/principal.service.ts"],"names":[],"mappings":"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","file":"components/auth/principal.service.js","sourcesContent":["Principal.$inject = ['$q', 'Account'];\n\nexport function Principal ($q, Account) {\n    var _identity,\n        _authenticated = false;\n\n    var service = {\n        authenticate: authenticate,\n        hasAnyAuthority: hasAnyAuthority,\n        hasAuthority: hasAuthority,\n        identity: identity,\n        isAuthenticated: isAuthenticated,\n        isIdentityResolved: isIdentityResolved\n    };\n\n    return service;\n\n    function authenticate (identity) {\n        _identity = identity;\n        _authenticated = identity !== null;\n    }\n\n    function hasAnyAuthority (authorities) {\n        if (!_authenticated || !_identity || !_identity.authorities) {\n            return false;\n        }\n\n        for (var i = 0; i < authorities.length; i++) {\n            if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function hasAuthority (authority) {\n        if (!_authenticated) {\n            return $q.when(false);\n        }\n\n        return this.identity().then(function(_id) {\n            return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n        }, function(){\n            return false;\n        });\n    }\n\n    function identity (force) {\n        var deferred = $q.defer();\n\n        if (force === true) {\n            _identity = undefined;\n        }\n\n        // check and see if we have retrieved the identity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (angular.isDefined(_identity)) {\n            deferred.resolve(_identity);\n\n            return deferred.promise;\n        }\n\n        // retrieve the identity data from the server, update the identity object, and then resolve.\n        Account.get().$promise\n            .then(getAccountThen)\n            .catch(getAccountCatch);\n\n        return deferred.promise;\n\n        function getAccountThen (account) {\n            _identity = account.data;\n            _authenticated = true;\n            deferred.resolve(_identity);\n        }\n\n        function getAccountCatch () {\n            _identity = null;\n            _authenticated = false;\n            deferred.resolve(_identity);\n        }\n    }\n\n    function isAuthenticated () {\n        return _authenticated;\n    }\n\n    function isIdentityResolved () {\n        return angular.isDefined(_identity);\n    }\n}\n"],"sourceRoot":"/source/"}
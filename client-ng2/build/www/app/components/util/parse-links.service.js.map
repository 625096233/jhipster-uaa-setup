{"version":3,"sources":["components/util/parse-links.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAGA;gBAAA;gBA+BA,CAAC;gBA7BG,0BAAK,GAAL,UAAM,MAAc;oBAChB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;oBACxD,CAAC;oBAED,uBAAuB;oBACvB,IAAI,KAAK,GAAa,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAI,KAAK,GAAQ,EAAE,CAAC;oBACpB,oCAAoC;oBACpC,KAAK,CAAC,OAAO,CAAE,UAAC,CAAC;wBACb,IAAI,OAAO,GAAa,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACrC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;4BACvB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;wBACzD,CAAC;wBACD,IAAI,GAAG,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;wBAC5D,IAAI,WAAW,GAAQ,EAAE,CAAC;wBAC1B,GAAG,CAAC,OAAO,CACP,IAAI,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EACvC,UAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAO,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CACvD,CAAC;wBACF,IAAI,IAAI,GAAQ,WAAW,CAAC,IAAI,CAAC;wBACjC,EAAE,CAAC,CAAE,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5B,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC1B,CAAC;wBACD,IAAI,IAAI,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;wBACjE,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;oBACvB,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBA/BL;oBAAC,iBAAU,EAAE;;8BAAA;gBAgCb,iBAAC;YAAD,CA/BA,AA+BC,IAAA;YA/BD,mCA+BC,CAAA","file":"components/util/parse-links.service.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ParseLinks {\n\n    parse(header: string): any {\n        if (header.length === 0) {\n            throw new Error('input must not be of zero length');\n        }\n\n        // Split parts by comma\n        let parts: string[] = header.split(',');\n        let links: any = {};\n        // Parse each part into a named link\n        parts.forEach( (p) => {\n            let section: string[] = p.split(';');\n            if (section.length !== 2) {\n                throw new Error('section could not be split on \";\"');\n            }\n            let url: string = section[0].replace(/<(.*)>/, '$1').trim();\n            let queryString: any = {};\n            url.replace(\n                new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                ($0, $1, $2, $3) => { return queryString[$1] = $3; }\n            );\n            let page: any = queryString.page;\n            if ( typeof page === \"string\") {\n                page = parseInt(page);\n            }\n            let name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n            links[name] = page;\n        });\n        return links;\n    }\n}\n"],"sourceRoot":"/source/"}
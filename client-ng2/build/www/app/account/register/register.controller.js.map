{"version":3,"sources":["account/register/register.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAMA;gBAWI,2BACsC,UAAU,EAChB,IAAI,EACI,YAAY,EACpC,UAAsB,EACtB,QAAkB;oBAJI,eAAU,GAAV,UAAU,CAAA;oBAChB,SAAI,GAAJ,IAAI,CAAA;oBACI,iBAAY,GAAZ,YAAY,CAAA;oBACpC,eAAU,GAAV,UAAU,CAAY;oBACtB,aAAQ,GAAR,QAAQ,CAAU;gBAClC,CAAC;gBAED,oCAAQ,GAAR;oBACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;oBACpC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;gBAC9B,CAAC;gBAED,2CAAe,GAAf;oBACI,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;gBAC1G,CAAC;gBAED,oCAAQ,GAAR;oBACI,iDAAiD;oBACjD,IAAI,EAAE,GAAG,IAAI,CAAC;oBACd,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;wBACzD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;oBAC9B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;wBACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBAClB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;wBAC5B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;wBAE7B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;4BAC/C,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;wBACtB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,QAAQ;4BACvB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;4BAClB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,IAAI,KAAK,sBAAsB,CAAC,CAAC,CAAC;gCACtE,EAAE,CAAC,eAAe,GAAG,OAAO,CAAC;4BACjC,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,IAAI,KAAK,+BAA+B,CAAC,CAAC,CAAC;gCACtF,EAAE,CAAC,gBAAgB,GAAG,OAAO,CAAC;4BAClC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,CAAC,KAAK,GAAG,OAAO,CAAC;4BACvB,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBA1DL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,UAAU;wBACpB,WAAW,EAAE,oCAAoC;qBACpD,CAAC;+BAaW,aAAM,CAAC,YAAY,CAAC;+BACpB,aAAM,CAAC,MAAM,CAAC;+BACd,aAAM,CAAC,cAAc,CAAC;;qCAfjC;gBAwDF,wBAAC;YAAD,CAvDA,AAuDC,IAAA;YAvDD,iDAuDC,CAAA","file":"account/register/register.controller.js","sourcesContent":["import {Component, OnInit, Inject, Renderer, ElementRef} from '@angular/core';\n\n@Component({\n    selector: 'register',\n    templateUrl: 'app/account/register/register.html'\n})\nexport class RegisterComponent implements OnInit {\n\n    confirmPassword: string;\n    doNotMatch: string;\n    error: string;\n    errorEmailExists: string;\n    errorUserExists: string;\n    login: Function;\n    registerAccount: any;\n    success: boolean;\n\n    constructor(\n            @Inject('$translate') private $translate,\n            @Inject('Auth') private auth,\n            @Inject('LoginService') private loginService,\n            private elementRef: ElementRef,\n            private renderer: Renderer) {\n    }\n\n    ngOnInit() {\n        this.login = this.loginService.open;\n        this.success = false;\n        this.registerAccount = {};\n    }\n\n    ngAfterViewInit() {\n        this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#login'), 'focus', []);\n    }\n\n    register() {\n        //TODO: remove this once Auth service is migrated\n        let vm = this;\n        if (this.registerAccount.password !== this.confirmPassword) {\n            this.doNotMatch = 'ERROR';\n        } else {\n            this.registerAccount.langKey = this.$translate.use();\n            this.doNotMatch = null;\n            this.error = null;\n            this.errorUserExists = null;\n            this.errorEmailExists = null;\n\n            this.auth.createAccount(this.registerAccount).then(function () {\n                vm.success = true;\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'login already in use') {\n                    vm.errorUserExists = 'ERROR';\n                } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                    vm.errorEmailExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":"/source/"}
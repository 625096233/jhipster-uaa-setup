{"version":3,"sources":["admin/health/health.service.ts"],"names":[],"mappings":"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","file":"admin/health/health.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\n\n@Injectable()\nexport class JhiHealthService {\n\n    separator: string;\n\n    constructor (private http: Http) {\n        this.separator = '.';\n    }\n\n    checkHealth(): Observable<any> {\n        return this.http.get('management/health').map((res: Response) => res.json());\n    }\n\n    transformHealthData (data): any {\n        let response = [];\n        this.flattenHealthData(response, null, data);\n        return response;\n    }\n\n    getBaseName (name): string {\n        if (name) {\n            let split = name.split('.');\n            return split[0];\n        }\n    }\n\n    getSubSystemName (name) : string{\n        if (name) {\n            let split = name.split('.');\n            split.splice(0, 1);\n            let remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n\n    /* private methods */\n    private addHealthObject (result, isLeaf, healthObject, name): any {\n\n        let status:any;\n        let error:any;\n        let healthData = {\n            'name': name,\n            'error': error,\n            'status': status\n        };\n        \n        let details = {};\n        let hasDetails = false;\n\n        for(var key in healthObject) {\n            let value = healthObject[key];\n            if (key === 'status' || key === 'error') {\n                healthData[key] = value;\n            } else {\n                if (!this.isHealthObject(value)) {\n                    details[key] = value;\n                    hasDetails = true;\n                }\n            }\n        }\n\n        // Add the of the details\n        if (hasDetails) {\n            angular.extend(healthData, { 'details': details});\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n\n    private flattenHealthData (result, path, data): any {\n        for(var key in data) {\n            let value = data[key];\n            if (this.isHealthObject(value)) {\n                if (this.hasSubSystem(value)) {\n                    this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                    this.flattenHealthData(result, this.getModuleName(path, key), value);\n                } else {\n                    this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                }\n            }\n        }\n\n        return result;\n    }\n\n\n    private getModuleName (path, name): string {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        }  else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    }\n\n    private hasSubSystem (healthObject): boolean {\n        let result = false;\n\n        for(var key in healthObject) {\n            let value = healthObject[key];\n            if (value && value.status) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    private isHealthObject (healthObject): boolean {\n        let result = false;\n\n        for(var key in healthObject) {\n            if (key === 'status') {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n}\n"],"sourceRoot":"/source/"}
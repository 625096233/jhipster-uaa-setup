{"version":3,"sources":["admin/configuration/configuration.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAKA;gBAEI,iCAAoB,IAAS;oBAAT,SAAI,GAAJ,IAAI,CAAK;gBAC7B,CAAC;gBAED,qCAAG,GAAH;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,UAAC,GAAY;wBAC5D,IAAI,UAAU,GAAS,EAAE,CAAC;wBAE1B,IAAM,gBAAgB,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;wBAEpC,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC;4BAC9B,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC3C,CAAC;wBAED,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,SAAS,EAAE,SAAS;4BACxC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC;gCACtC,MAAM,CAAC,CAAC,CAAC;4BACb,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;gCACzC,MAAM,CAAC,CAAC,CAAC,CAAC;4BACd,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;gCACzC,MAAM,CAAC,CAAC,CAAC;wBACjB,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,wCAAM,GAAN;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,UAAC,GAAY;wBACpD,IAAI,UAAU,GAAO,EAAE,CAAC;wBAExB,IAAM,gBAAgB,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;wBAEpC,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC;4BAC9B,IAAI,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;4BACvC,IAAI,IAAI,GAAS,EAAE,CAAC;4BAEpB,GAAG,CAAA,CAAC,IAAI,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC;gCAC3B,IAAI,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC,UAAU,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC;4BACrD,CAAC;4BACD,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;wBAC3B,CAAC;wBAED,MAAM,CAAC,UAAU,CAAC;oBACtB,CAAC,CAAC,CAAC;gBACP,CAAC;gBA7CL;oBAAC,iBAAU,EAAE;;2CAAA;gBA8Cb,8BAAC;YAAD,CA7CA,AA6CC,IAAA;YA7CD,6DA6CC,CAAA","file":"admin/configuration/configuration.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class JhiConfigurationService {\n\n    constructor(private http:Http) {\n    }\n\n    get():Observable<any> {\n        return this.http.get('management/configprops').map((res:Response) => {\n            let properties:any[] = [];\n\n            const propertiesObject = res.json();\n\n            for(var key in propertiesObject) {\n                properties.push(propertiesObject[key]);\n            }\n\n            return properties.sort((propertyA, propertyB) => {\n                if (propertyA.prefix === propertyB.prefix)\n                    return 0;\n                else if (propertyA.prefix < propertyB.prefix)\n                    return -1;\n                else if (propertyA.prefix > propertyB.prefix)\n                    return 1;\n            });\n        });\n    }\n\n    getEnv(): Observable<any> {\n        return this.http.get('management/env').map((res:Response) => {\n            let properties:any = {};\n\n            const propertiesObject = res.json();\n\n            for(var key in propertiesObject) {\n                let valsObject = propertiesObject[key];\n                let vals:any[] = [];\n\n                for(var valKey in valsObject) {\n                    vals.push({key: valKey, val:valsObject[valKey]});\n                }\n                properties[key] = vals;\n            }\n\n            return properties;\n        });\n    }\n}\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["blocks/config/http.config.ts"],"names":[],"mappings":";;;IAEA,oBAA2B,kBAAkB,EAAE,aAAa,EAAE,yCAAyC,EAAE,0BAA0B;QAE/H,2CAA2C;QAC3C,yCAAyC,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC;QAE3F,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAElC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC3D,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1D,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC3D,oGAAoG;QAEpG,0BAA0B,CAAC,IAAI,CAAC,SAAS,EAAE;YACvC,IAAI,EAAG,SAAS;YAChB,MAAM,EAAE,UAAS,GAAG,IAAI,MAAM,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC;YAChE,MAAM,EAAE,UAAS,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,EAAE,UAAS,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxD,EAAE,EAAE,UAAS,GAAG,IAAI,MAAM,CAAC,CAAC,IAAI,EAAC,KAAK,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChE,OAAO,EAAE,eAAe;SAC3B,CAAC,CAAC;IACP,CAAC;IApBD,mCAoBC,CAAA;;;;YAtBD,UAAU,CAAC,OAAO,GAAG,CAAC,oBAAoB,EAAE,eAAe,EAAE,2CAA2C,EAAE,4BAA4B,CAAC,CAAC","file":"blocks/config/http.config.js","sourcesContent":["HttpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\nexport function HttpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n    \n    //Cache everything except rest api requests\n    httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n    $urlRouterProvider.otherwise('/');\n\n    $httpProvider.interceptors.push('ErrorHandlerInterceptor');\n    $httpProvider.interceptors.push('AuthExpiredInterceptor');\n    $httpProvider.interceptors.push('NotificationInterceptor');\n    // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n    $urlMatcherFactoryProvider.type('boolean', {\n        name : 'boolean',\n        decode: function(val) { return val === true || val === 'true'; },\n        encode: function(val) { return val ? 1 : 0; },\n        equals: function(a, b) { return this.is(a) && a === b; },\n        is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n        pattern: /bool|true|0|1/\n    });\n}\n"],"sourceRoot":"/source/"}